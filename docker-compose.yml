version: "2"

services:
  nfacctd:
    image: pmacct/nfacctd:v1.7.9
    restart: always
    ports:
      - "9996:9996/udp"
    volumes:
      - ./nfacctd/nfacctd.conf:/etc/pmacct/nfacctd.conf
      - ./nfacctd/pretag.map:/etc/pmacct/pretag.map
      - ./nfacctd/ports.lst:/etc/pmacct/ports.lst
      - ./nfacctd/kafka.csv:/etc/pmacct/kafka.csv

  kafka:
    image: 'bitnami/kafka:3.8.0'
    restart: always
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.2
    restart: always
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/:ro
      - ./logstash/data/:/var/lib/metranova/:ro
    environment:
      - XPACK_MONITORING_ENABLED=false
      - LOGSTASH_OPENSEARCH_PASSWORD=${MN_LOGSTASH_OPENSEARCH_PASSWORD}
      - LOGSTASH_OPENSEARCH_USER=metranova_writer
      - OPENSEARCH_URL=${MN_OPENSEARCH_URL}
    #TODO: We need to install the opensearch output plugin before starting logstash. Should make this a custom image.
    command: bash -c "logstash-plugin install logstash-output-opensearch && /usr/local/bin/docker-entrypoint"

  opensearch: 
    image: opensearchproject/opensearch:2.17.1
    restart: always
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch # Name the node that will run in this container
      - discovery.seed_hosts=opensearch # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch # Nodes eligible to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - plugins.security.unsupported.restapi.allow_securityconfig_modification=true # allow us to enable anonymous access auth
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${MN_OPENSEARCH_ADMIN_PASSWORD} # Sets admin password. Must be a strong password or opensearch will reject.
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.17.1
    restart: always
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query

  opensearch-config:
    image: metranova/opensearch-config:latest
    build:
      context: ./opensearch_config
      dockerfile: Dockerfile
    command: ["bash", "config.sh"]
    depends_on:
      - opensearch
    environment:
      - OPENSEARCH_HOST=opensearch
      - OPENSEARCH_PORT=9200
      - OPENSEARCH_ADMIN_PASSWORD=${MN_OPENSEARCH_ADMIN_PASSWORD}
      - LOGSTASH_OPENSEARCH_PASSWORD=${MN_LOGSTASH_OPENSEARCH_PASSWORD}

  grafana:
    image: grafana/grafana:11.2.2-ubuntu
    restart: always
    environment:
      - GF_INSTALL_PLUGINS=grafana-opensearch-datasource,grafana-googlesheets-datasource,grafana-polystat-panel,marcusolsson-hourly-heatmap-panel,netsage-sankey-panel,netsage-slopegraph-panel,esnet-chord-panel,netsage-bumpchart-panel,esnet-matrix-panel,grafana-clickhouse-datasource,esnet-arcdiagram-panel,esnet-networkmap-panel
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_SECURITY_ADMIN_PASSWORD=${MN_GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - OPENSEARCH_URL=${MN_OPENSEARCH_URL}
    ports:
      - 3000:3000
    volumes:
      - ./grafana/datasources/:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards/:/etc/grafana/provisioning/dashboards/
      - ./grafana/images/metranova_icon.svg:/usr/share/grafana/public/img/grafana_icon.svg

  nginx-cert-init:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./certbot/selfsigned.sh:/usr/share/metranova/selfsigned.sh
    environment:
      - MN_HOSTNAME=${MN_HOSTNAME}
    entrypoint: "/bin/sh /usr/share/metranova/selfsigned.sh"

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - nginx-cert-init
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/templates
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    environment:
      - MN_HOSTNAME=${MN_HOSTNAME}

####
# The following is some patchwork Andy started to get a LetsEncrypt certbot container working. It's not finished yet.
#
# Th following goes under nginx and should reload the certs every 6 hours. 
# There is a problem where overriding the command prevents templates from being run through envsubst. 
# Probably just a matter of getting the right command.
    #reloads certs periodically
    #command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

# The following is the start of a certbot container. 
  # certbot:
  #   image: certbot/certbot
  #   depends_on:
  #     - nginx
  #   volumes:
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot
  #     - ./certbot/entrypoint.sh:/usr/share/metranova/entrypoint.sh
  #   environment:
  #     - MN_HOSTNAME=${MN_HOSTNAME}
  #     - MN_USE_LETSENCRYPT=${MN_USE_LETSENCRYPT}
  #   entrypoint: "/bin/bash /usr/share/metranova/entrypoint.sh"

volumes:
  opensearch-data: